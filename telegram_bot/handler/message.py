import time
from datetime import datetime

from aiogram import F, types, Router
from aiogram.filters import Command
from aiogram.types import Message

from telegram_bot import db, env

router = Router()

@router.message(Command("start"))
async def start(message: Message):
    user = await db.get_users(message.from_user.id, multiple=False)
    
    if user is None:
        await db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
        answer_text = """üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å <b>Doggy Logy</b>
        
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏</b>, –∫–æ—Ç–æ—Ä—ã–º <b>–¥–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏</b>. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à—É <b>–ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>

<i>–°–∫–∏–¥–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</i>
        """
    
    else:
        if user["level"] < 0:
            await message.answer("‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</b>", parse_mode="html")
            return
                
        subscription = await db.get_subscriptions(user_id=message.from_user.id)
        if subscription:
            subscription = subscription[-1]
            if subscription["end_date"] < time.time():
                subscription = None
            
        answer_text = f"""üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å <b>Doggy Logy</b>
        
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏</b>, –∫–æ—Ç–æ—Ä—ã–º <b>–¥–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏</b>. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à—É <b>–ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>

<i>–°–∫–∏–¥–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</i>
{f'\n<b>üîë –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <span class="tg-spoiler">{user["promocode"]}</span>' if subscription else ""}
<b>{"üîã" if subscription else "ü™´"} –ü–æ–¥–ø–∏—Å–∫–∞:</b> {"<code>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</code>" if not subscription else datetime.fromtimestamp(subscription["end_date"]).strftime('%d %B %H:%M')}
        """
        
    start_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        types.InlineKeyboardButton(text="üîã –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [types.InlineKeyboardButton(text="üõç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")],
        [types.InlineKeyboardButton(text="‚ùî –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about")]
    ])
    
    await message.answer(answer_text, parse_mode="html", reply_markup=start_markup)

@router.message(Command("usepromo"))
async def use_promo_handler(message: Message):
    promocode = message.text.split(" ")[1]
    
    user = await db.get_users(message.from_user.id)
    if user["level"] < 0:
        return

    if user["level"] > 1:
        partners = await db.get_partners()
    else:
        partners = await db.get_partners(owner_id=message.from_user.id)
    
    if not partners:
        await message.answer(f"‚ùå <b>–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è.</b>", parse_mode="html")
        return

    if promocode.startswith("DL") and len(promocode) == 8:
        partner_ids = [partner["partner_id"] for partner in partners]
        
        promo_user = await db.get_users(promocode=promocode)
        
        if promo_user:
            redeemed = await db.get_redeemed_promo(promocode)
            redeemed_partners = [promo["partner_id"] for promo in redeemed if promo["partner_id"] in partner_ids]

            redeem_promo_keyboard = [
                [types.InlineKeyboardButton(text=f"{"‚ùå" if partner["partner_id"] in redeemed_partners else "‚úÖ"} {partner["partner_name"]}", callback_data=f"redeem_promocode:{partner["partner_id"]}:{promocode}" if partner["partner_id"] not in redeemed_partners else "already_redeemed")] for partner in partners
            ]
            redeem_promo_keyboard.append([types.InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="menu")])
            redeem_promo_markup = types.InlineKeyboardMarkup(inline_keyboard=redeem_promo_keyboard)

            await message.answer(f"üìá <b>–°–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:</b>", parse_mode="html", reply_markup=redeem_promo_markup)
        
        else:
            await message.answer(f"‚ö† <b>–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π.</b>", parse_mode="html")
    else:
        await message.answer(f"‚ö† <b>–í–≤–µ–¥—ë–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.</b>", parse_mode="html")

@router.message(Command(commands=["admin", "ap", "panel"]))
async def admin_panel_handler(message: Message):
    user = await db.get_users(message.from_user.id)
    if user["level"] > 2:
        return
    
    await admin_panel(message, user, False)
    
async def admin_panel(message: Message, user: dict, edit: bool = True):
    if user["level"] > 2:
        return

    admin_panel_keyboard = [
        [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"),
        types.InlineKeyboardButton(text="üìà –ü–∞—Ä—Ç–Ω—ë—Ä—ã", callback_data="admin:partners:1")],
        [types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users:1")],
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data="admin:add_partner")],
        [types.InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="menu")]
    ]

    admin_panel_markup = types.InlineKeyboardMarkup(inline_keyboard=admin_panel_keyboard)

    if edit:
        try:
            await message.edit_text(text=f"""üõ° <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>""", parse_mode="html", reply_markup=admin_panel_markup)
        except:
            await message.delete()
        else:
            return
        
    await message.answer(text=f"""üõ° <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>""", parse_mode="html", reply_markup=admin_panel_markup)

@router.message(F.content_type == types.ContentType.WEB_APP_DATA)
async def webapp_catch(message: Message):
    profile = await db.get_user_profile(message.from_user.id)
    if profile["full_name"] is None:
        valid_data = await db.validate_user_form_data(message.web_app_data.data, message.from_user.id)
    else:
        return
    
    profile_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîã –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [types.InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="menu")],
    ])

    if valid_data:
        await db.update_user_profile(message.from_user.id, full_name=valid_data["human"]["full_name"], birth_date=datetime.strptime(valid_data["human"]["birth_date"], "%Y-%m-%d").timestamp(), phone_number=valid_data["human"]["phone_number"], about_me=valid_data["human"]["about_me"])
        for pet in valid_data["pets"]:
            await db.add_pet(message.from_user.id, pet["weight"], pet["name"], datetime.strptime(pet["birth_date"], "%Y-%m-%d").timestamp(), pet["gender"], pet["type"], pet["breed"])
        await env.bot.send_message(message.chat.id, f"‚úÖ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω.</b>", parse_mode="html", reply_markup=profile_markup)
    else:
        await message.answer("‚ùå <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</b>", parse_mode="html")
