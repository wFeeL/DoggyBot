import pathlib
import time
from datetime import datetime

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from telegram_bot import db
from telegram_bot.env import PartnerForm, bot, oferta_url, webapp_url, support_username
from telegram_bot.handler.message import admin_panel

router = Router()

@router.callback_query()
async def callback_handler(c: CallbackQuery, state: FSMContext):
    message = c.message
    user = await db.get_users(user_id=c.from_user.id, multiple=False)
    await state.clear()

    if user:
        if user["level"] < 0:
            return
    else:
        return

    menu_markup = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
    ]])
    categories_markup = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="categories")
    ]])

    if c.data == "about":
        await message.edit_text(text="""üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å <b>Doggy Logy</b>
        
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏</b>, –∫–æ—Ç–æ—Ä—ã–º <b>–¥–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏</b>. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à—É <b>–ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>

<i>–°–∫–∏–¥–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</i>

<i>–°–æ–∑–¥–∞—Ç–µ–ª—å –±—Ä–µ–Ω–¥–∞ Doggy Logy: –í–∞–ª–µ—Ä–∏—è –ü–æ–ø–æ–≤–∞ @doggy_logy</i>""", parse_mode="html", reply_markup=menu_markup)

    elif c.data == "menu":
        start_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
             types.InlineKeyboardButton(text="üîã –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
            [types.InlineKeyboardButton(text="üõç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")],
            [types.InlineKeyboardButton(text="‚ùî –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about")]
        ])

        subscription = await db.get_subscriptions(user_id=c.from_user.id)
        if subscription:
            subscription = subscription[-1]
            if subscription["end_date"] < time.time():
                subscription = None

        await message.edit_text(f"""üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å <b>Doggy Logy</b>
        
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏</b>, –∫–æ—Ç–æ—Ä—ã–º <b>–¥–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏</b>. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à—É <b>–ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>

<i>–°–∫–∏–¥–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</i>
{f'\n<b>üîë –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <span class="tg-spoiler">{user["promocode"]}</span>' if subscription else ""}
<b>{"üîã" if subscription else "ü™´"} –ü–æ–¥–ø–∏—Å–∫–∞:</b> {"<code>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</code>" if not subscription else datetime.fromtimestamp(subscription["end_date"]).strftime('%d %B %H:%M')}
        """, reply_markup=start_markup, parse_mode="html")

    elif c.data == "categories":
        categories = await db.get_categories(category_enabled=True)
        choose_category_keyboard = [[types.InlineKeyboardButton(text=f"{category["category_name"]}",
                                                                callback_data=f"category:{category["category_id"]}")]
                                    for category in categories]
        choose_category_keyboard.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")])
        choose_category_markup = types.InlineKeyboardMarkup(inline_keyboard=choose_category_keyboard)

        if not message.photo:
            await message.edit_text("""üõç <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>""", parse_mode="html", reply_markup=choose_category_markup)
        else:
            await message.delete()
            await bot.send_message(c.from_user.id, """üõç <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>""", parse_mode="html",
                                   reply_markup=choose_category_markup)

    elif c.data.startswith("category"):
        category_id = c.data.split(":")[1]
        category = await db.get_categories(category_id=int(category_id))
        partners = await db.get_partners(category_id=int(category_id))

        answer_text = f"<b>{category["category_name"]}</b>"
        multiple = []

        for partner in partners:
            text = f"""

<b>{partner["partner_name"]}</b>
{"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º\n" + partner["partner_url"] + "\n" if partner["partner_url"] else ""}<blockquote>{partner["partner_legacy_text"]}</blockquote>"""
            if (len(answer_text + text) >= 842 and len(multiple) == 0) or (
                    len(answer_text + text) >= 3914 and len(multiple) > 0):
                multiple.append(answer_text)
                answer_text = ""

            answer_text += text

        subscription = await db.get_subscriptions(user_id=c.from_user.id)
        if subscription:
            subscription = subscription[-1]
            if subscription["end_date"] < time.time():
                subscription = None

        if subscription:
            answer_text += """
        
<blockquote><b>–ü–†–û–ú–û–ö–û–î –î–õ–Ø –í–°–ï–• –ü–ê–†–¢–ù–ï–†–û–í</b> <code>DoggyLogy</code> 
–ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Ç –í–∞—Å –≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞!</blockquote>"""

        multiple.append(answer_text)

        answer_text = multiple[0]
        catigories_markup_ = categories_markup if len(multiple) == 1 else None

        if pathlib.Path(f"img/{category_id}.png").is_file():
            await message.edit_media(
                types.InputMediaPhoto(media=types.FSInputFile(f"img/{category_id}.png", "category_image.png"),
                                      caption=answer_text, parse_mode="html"), reply_markup=catigories_markup_)
        else:
            await message.edit_text(text=answer_text, parse_mode="html", reply_markup=catigories_markup_)

        for answer_text in multiple:
            catigories_markup_ = categories_markup if answer_text == multiple[-1] else None

            await message.answer(text=answer_text, parse_mode="html", reply_markup=catigories_markup_)

    elif c.data == "subscription":
        pass
#         subscription = await db.get_subscriptions(user_id=c.from_user.id)
#         if subscription:
#             subscription = subscription[-1]
#             if subscription["end_date"] < time.time():
#                 subscription = None
#
#         if subscription is None:
#             user_profile = await db.get_user_profile(c.from_user.id)
#
#
#             keyboard = []
#             if user_profile["full_name"]:
#                 keyboard.append([types.InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
#                                                             callback_data=f"create_invoice:{settings["length"]}:{settings["price"]}")])
#             else:
#                 keyboard.append([types.InlineKeyboardButton(text="ü™™ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="fill_profile")])
#
#             keyboard.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"menu")])
#
#             buy_subscription_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
#             await message.edit_text(f"""üîã <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>
#
# ‚è≤ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{int(settings["length"] / 31)} –º–µ—Å.</code>
# üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> <code>{settings["price"]}—Ä</code>
#
# <i>–û—Ñ–æ—Ä–º–ª—è—è –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å <a href="{oferta_url}">—É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã</a></i>
# {'\n<blockquote>–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ü–æ–¥–ø–∏—Å–∫–∞" –∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.</blockquote>' if not user_profile["full_name"] else ""}
# """, parse_mode="html", reply_markup=buy_subscription_markup, disable_web_page_preview=True)

    elif c.data.startswith("check_invoice"):
        pass
#         _, invoice_id, summ, length = c.data.split(":")
#         status = check_invoice(invoice_id, summ)
#
#         if status != 0:
#             if status == -1:
#                 await c.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#
#             if status == 1:
#                 await c.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
#                 await db.add_subscription(c.from_user.id, int(summ), int(length))
#
#             start_markup = types.InlineKeyboardMarkup(inline_keyboard=[
#                 [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
#                  types.InlineKeyboardButton(text="üîã –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
#                 [types.InlineKeyboardButton(text="üõç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")],
#                 [types.InlineKeyboardButton(text="‚ùî –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about")]
#             ])
#
#             subscription = await db.get_subscriptions(user_id=c.from_user.id)
#             if subscription:
#                 subscription = subscription[-1]
#                 if subscription["end_date"] < time.time():
#                     subscription = None
#
#             await message.edit_text(f"""üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å <b>Doggy Logy</b>
#
# –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏</b>, –∫–æ—Ç–æ—Ä—ã–º <b>–¥–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏</b>. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à—É <b>–ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>
#
# <i>–°–∫–∏–¥–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞</i>
#
# <b>üîë –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:</b> <span class="tg-spoiler">{user["promocode"]}</span>
# <b>{"üîã" if subscription else "ü™´"} –ü–æ–¥–ø–∏—Å–∫–∞:</b> {"<code>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</code>" if not subscription else datetime.fromtimestamp(subscription["end_date"]).strftime('%d %B %H:%M')}
#             """, reply_markup=start_markup, parse_mode="html")
#
#         elif status == 0:
#             await c.answer("‚è≥ –°—á—ë—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É")

    elif c.data.startswith("create_invoice"):
        pass
#         _, length, price = c.data.split(":")
#         invoice_url, invoice_id = create_invoice(price, length)
#
#         pay_subscription_markup = types.InlineKeyboardMarkup(inline_keyboard=[
#             [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url),
#              types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
#                                         callback_data=f"check_invoice:{invoice_id}:{price}:{length}")]
#         ])
#         await message.edit_text(f"""üí∞ <b>–°–æ–∑–¥–∞–Ω —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏</b>
#
# üîã –ü–æ–¥–ø–∏—Å–∫–∞ - <code>{round(int(length) / 31, 1)} –º–µ—Å | {price}—Ä</code>
#
# <blockquote>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b> —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.
#
# <i>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã –ø–∏—Å–∞—Ç—å @{support_username}</i></blockquote>""", parse_mode="html",
#                                 reply_markup=pay_subscription_markup)

    elif c.data.startswith("redeem_promocode"):
        _, partner_id, promocode = c.data.split(":")

        partner = await db.get_partners(int(partner_id))
        user_ = await db.get_users(promocode=promocode)

        if user["level"] > 1 or partner["owner_user_id"] == c.from_user.id:
            await db.redeem_promo(user_["user_id"], promocode, partner_id)
            await c.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–ø–∏—Å–∞–Ω.")
            await message.delete()
            await bot.send_message(user_["user_id"],
                                   f"‚úÖ <b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ —Å–ø–∏—Å–∞–Ω —É –ø–∞—Ä—Ç–Ω—ë—Ä–∞ <code>{partner["partner_name"]}</code></b>",
                                   parse_mode="html")

    elif c.data == "already_redeemed":
        await c.answer(f"‚ö† –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å–ø–∏—Å–∞–Ω —É —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.")

    elif c.data == "fill_profile":
        await message.delete()
        await message.answer("üëá <b>–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
                             reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                                 [types.KeyboardButton(text="ü™™ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
                                                       web_app=types.WebAppInfo(url=webapp_url))]
                             ], resize_keyboard=True, one_time_keyboard=True), parse_mode="html")

    elif c.data == "profile":
        user_profile = await db.get_user_profile(c.from_user.id)

        menu_form_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="ü™™ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="fill_profile")],
            [types.InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="menu")]
        ])

        if user_profile["full_name"] is None:
            await message.edit_text(f"""üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

<i>–í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!</i>""", reply_markup=menu_form_markup, parse_mode="html")

        else:
            await message.edit_text(f"""üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üé≠ <b>–û –≤–∞—Å:</b>
<b>–ü–æ–ª–Ω–æ–µ –∏–º—è</b>: <code>{user_profile["full_name"]}</code>
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: <code>{user_profile["phone_number"]}</code>
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: <code>{datetime.fromtimestamp(user_profile["birth_date"]).strftime('%d %B %Y')}</code>
<b>–í–æ–∑—Ä–∞—Å—Ç</b>: <code>{round((time.time() - user_profile["birth_date"]) // (86400 * 365))} –ª–µ—Ç</code>

üê∂ <b>–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:</b>
{''.join([f'<b>{pet["name"]}</b>: <code>~{pet["approx_weight"]}–∫–≥, {round((time.time() - pet["birth_date"]) // (86400 * 365))} –ª–µ—Ç</code>\n' for pet in user_profile["pets"]])}""",
                                    parse_mode="html", reply_markup=menu_markup)
    if user["level"] < 2:
        return

    elif c.data.startswith("admin"):
        action = c.data.split(":")[1]
        admin_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:panel"), ]
        ])

        if action == "panel":
            await admin_panel(message, user)
            return

        elif action == "stats":
            partners = await db.get_partners()
            orders_day = await db.get_subscriptions(start_ts=time.time() - 86400) or []
            orders_month = await db.get_subscriptions(start_ts=time.time() - 86400 * 31) or []
            orders_year = await db.get_subscriptions(start_ts=time.time() - 86400 * 365) or []

            users = await db.get_users()

            await message.edit_text(f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:
                                    
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: <code>{len(partners)}</code>
–ü–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –¥–µ–Ω—å: <code>{len(orders_day)} / {sum([order["price"] for order in orders_day])}‚ÇΩ</code>
–ü–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –º–µ—Å—è—Ü: <code>{len(orders_month)} / {sum([order["price"] for order in orders_month])}‚ÇΩ</code>
–ü–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –≥–æ–¥: <code>{len(orders_year)} / {sum([order["price"] for order in orders_year])}‚ÇΩ</code>""",
                                    parse_mode="html", reply_markup=admin_markup)

        elif action == "partners":
            page = int(c.data.split(":")[2]) if len(c.data.split(":")) > 2 else 1
            partners = await db.get_partners()
            total_pages = (len(partners) + 14) // 15
            partners = partners[(page - 1) * 15: page * 15]

            partner_buttons = [
                [types.InlineKeyboardButton(text=f"{partner['partner_name']} (ID: {partner['partner_id']})",
                                            callback_data=f"partner:{partner['partner_id']}")]
                for partner in partners
            ]
            navigation_buttons = []
            if page > 1:
                navigation_buttons.append(
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:partners:{page - 1}"))
            if page < total_pages:
                navigation_buttons.append(
                    types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin:partners:{page + 1}"))
            partner_buttons.append(navigation_buttons)
            partner_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:panel")])
            partner_markup = types.InlineKeyboardMarkup(inline_keyboard=partner_buttons)

            await message.edit_text("üìà <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã:</b>", parse_mode="html", reply_markup=partner_markup)

        elif action == "users":
            page = int(c.data.split(":")[2]) if len(c.data.split(":")) > 2 else 1
            users = await db.get_users()
            total_pages = (len(users) + 9) // 10
            users = users[(page - 1) * 10: page * 10]

            user_buttons = [
                [types.InlineKeyboardButton(text=f"{user['full_name']} (ID: {user['user_id']})",
                                            callback_data=f"user:{user['user_id']}")]
                for user in users
            ]
            navigation_buttons = []
            if page > 1:
                navigation_buttons.append(
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:users:{page - 1}"))
            if page < total_pages:
                navigation_buttons.append(
                    types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin:users:{page + 1}"))
            user_buttons.append(navigation_buttons)
            user_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:panel")])
            user_markup = types.InlineKeyboardMarkup(inline_keyboard=user_buttons)

            await message.edit_text("üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>", parse_mode="html", reply_markup=user_markup)

        elif action == "add_partner":
            await c.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML")
            await state.set_state(PartnerForm.awaiting_partner_name_new)

    elif c.data.startswith("user:"):
        user_id = int(c.data.split(":")[1])
        user = await db.get_users(user_id=user_id, multiple=False)
        subscriptions = await db.get_subscriptions(user_id=user_id) or []
        total_spent = sum(sub["price"] for sub in subscriptions)
        subscription_count = len(subscriptions)
        subscription_status = "–ê–∫—Ç–∏–≤–Ω–∞" if subscriptions and subscriptions[-1][
            "end_date"] > time.time() else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
        user_status = user["level"]

        user_info = f"""
üë§ <b>{user['full_name']} (ID: {user['user_id']})</b>
<b>–°—Ç–∞—Ç—É—Å:</b> <code>{"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if user_status == 0 else "–ü–∞—Ä—Ç–Ω–µ—Ä" if user_status == 1 else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user_status == 2 else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_status == -1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</code>
<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> <code>{subscription_status}</code>
<b>–ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b> <code>{subscription_count}</code>
<b>–ù–∞ —Å—É–º–º—É:</b> <code>{total_spent}‚ÇΩ</code>
        """

        user_actions = [
            [types.InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_action:block:{user_id}") if user[
                                                                                                                     "level"] >= 0 else types.InlineKeyboardButton(
                text="‚≠ï –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_action:unblock:{user_id}")],
            [types.InlineKeyboardButton(text="üîã –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                        callback_data=f"user_action:give_subscription:{user_id}") if subscription_status == "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞" else types.InlineKeyboardButton(
                text="ü™´ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"user_action:remove_subscription:{user_id}")],
            [types.InlineKeyboardButton(text="üë§ –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                                        callback_data=f"user_action:make_user:{user_id}")],
            [types.InlineKeyboardButton(text="üõç –°–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º",
                                        callback_data=f"user_action:make_partner:{user_id}")],
            [types.InlineKeyboardButton(text="üõ° –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"user_action:make_admin:{user_id}")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:users")]
        ]
        user_markup = types.InlineKeyboardMarkup(inline_keyboard=user_actions)

        await message.edit_text(user_info, parse_mode="html", reply_markup=user_markup)

    elif c.data.startswith("partner:"):
        partner_id = int(c.data.split(":")[1])
        partner = await db.get_partners(partner_id=partner_id)
        owner = await db.get_users(user_id=partner["owner_user_id"], multiple=False)

        partner_info = f"""
üìà <b>{partner['partner_name']} (ID: {partner['partner_id']})</b>
<b>–¢–ì –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b> {owner['full_name']} (ID: {owner['user_id']})
<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <code>{partner["category"]['category_name']} {partner["category"]['category_name']}</code>
<b>–°–∫—Ä—ã—Ç:</b> <code>{"–î–∞" if not partner['partner_enabled'] else "–ù–µ—Ç"}</code>

{"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º\n" + partner["partner_url"] + "\n" if partner["partner_url"] else ""}<blockquote>{partner["partner_legacy_text"]}</blockquote>
        """

        partner_actions = [
            [types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"partner_action:delete:{partner_id}")],
            [types.InlineKeyboardButton(text="üÜî –£–∫–∞–∑–∞—Ç—å ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞",
                                        callback_data=f"partner_action:set_owner:{partner_id}")],
            [types.InlineKeyboardButton(text="üëÅ –°–∫—Ä—ã—Ç—å", callback_data=f"partner_action:hide:{partner_id}") if partner[
                'partner_enabled'] else types.InlineKeyboardButton(text="üëÅ –ü–æ–∫–∞–∑–∞—Ç—å",
                                                                   callback_data=f"partner_action:show:{partner_id}")],
            [types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
                                        callback_data=f"partner_action:edit_text:{partner_id}")],
            [types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
                                        callback_data=f"partner_action:edit_name:{partner_id}")],
            [types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                        callback_data=f"partner_action:edit_category:{partner_id}")],
            [types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å URL –ø–∞—Ä—Ç–Ω—ë—Ä–∞",
                                        callback_data=f"partner_action:edit_url:{partner_id}")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:partners")]
        ]
        partner_markup = types.InlineKeyboardMarkup(inline_keyboard=partner_actions)

        await message.edit_text(partner_info, parse_mode="html", reply_markup=partner_markup,
                                disable_web_page_preview=True)

    elif c.data.startswith("user_action:"):
        action, user_id = c.data.split(":")[1:]
        user_id = int(user_id)

        if action == "block":
            await db.update_user(user_id, level=-1)
            await c.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        elif action == "unblock":
            await db.update_user(user_id, level=0)
            await c.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        elif action == "give_subscription":
            await db.add_subscription(user_id, price=0, length=30)
            await c.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞.")
        elif action == "remove_subscription":
            await db.remove_subscription(user_id)
            await c.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        elif action == "make_user":
            await db.update_user(user_id, level=0)
            await c.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –∫–ª–∏–µ–Ω—Ç–æ–º.")
        elif action == "make_partner":
            await db.update_user(user_id, level=1)
            await c.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.")
        elif action == "make_admin":
            await db.update_user(user_id, level=2)
            await c.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º.")
        c_u = c.model_copy(update={"data": f"user:{user_id}"})
        await callback_handler(c_u, state)

    if c.data.startswith("partner_action:"):
        action, partner_id = c.data.split(":")[1:]
        partner_id = int(partner_id)

        control_partner_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"partner:{partner_id}")]
        ])

        if action == "delete":
            await db.delete_partner(partner_id)
            await c.answer("–ü–∞—Ä—Ç–Ω—ë—Ä —É–¥–∞–ª—ë–Ω.")
            c_u = c.model_copy(update={"data": "admin:partners"})
            await callback_handler(c_u, state)

        elif action == "set_owner":
            await message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML",
                                    reply_markup=control_partner_markup)
            await state.update_data(message_to_delete=message)
            await state.update_data(partner_id=partner_id)
            await state.set_state(PartnerForm.awaiting_partner_owner)

        elif action == "edit_text":
            await message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML",
                                    reply_markup=control_partner_markup)
            await state.update_data(message_to_delete=message)
            await state.update_data(partner_id=partner_id)
            await state.set_state(PartnerForm.awaiting_partner_text)

        elif action == "edit_name":
            await message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML",
                                    reply_markup=control_partner_markup)
            await state.update_data(message_to_delete=message)
            await state.update_data(partner_id=partner_id)
            await state.set_state(PartnerForm.awaiting_partner_name)

        elif action == "edit_category":
            categories_text = "\n".join(
                [f"<code>{category['category_id']}</code>: <b>{category['category_name']}</b>" for category in
                 await db.get_categories()])
            await message.edit_text(categories_text + "\n\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML",
                                    reply_markup=control_partner_markup)
            await state.update_data(message_to_delete=message)
            await state.update_data(partner_id=partner_id)
            await state.set_state(PartnerForm.awaiting_partner_category)

        elif action == "edit_url":
            await message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML",
                                    reply_markup=control_partner_markup)
            await state.update_data(message_to_delete=message)
            await state.update_data(partner_id=partner_id)
            await state.set_state(PartnerForm.awaiting_partner_url)

        elif action == "hide":
            await db.update_partner(partner_id, partner_enabled=False)
            await c.answer("‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä —Å–∫—Ä—ã—Ç.")
            c_u = c.model_copy(update={"data": f"partner:{partner_id}"})
            await callback_handler(c_u, state)

        elif action == "show":
            await db.update_partner(partner_id, partner_enabled=True)
            await c.answer("‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä –ø–æ–∫–∞–∑–∞–Ω.")
            c_u = c.model_copy(update={"data": f"partner:{partner_id}"})
            await callback_handler(c_u, state)

@router.message(PartnerForm.awaiting_partner_owner)
async def set_partner_owner(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_id = data["partner_id"]
    new_owner_id = int(message.text)
    await db.update_partner(partner_id, owner_user_id=new_owner_id)
    control_partner_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"partner:{partner_id}")]
    ])
    await data["message_to_delete"].delete()
    await message.answer("‚úÖ <b>ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —É–∫–∞–∑–∞–Ω.</b>", parse_mode="HTML", reply_markup=control_partner_markup)
    await state.clear()

@router.message(PartnerForm.awaiting_partner_text)
async def edit_partner_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_id = data["partner_id"]
    new_text = message.text
    await db.update_partner(partner_id, partner_legacy_text=new_text)
    control_partner_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"partner:{partner_id}")]
    ])
    await data["message_to_delete"].delete()
    await message.answer("‚úÖ <b>–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω—ë–Ω.</b>", parse_mode="HTML", reply_markup=control_partner_markup)
    await state.clear()

@router.message(PartnerForm.awaiting_partner_name)
async def edit_partner_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_id = data["partner_id"]
    new_name = message.text
    await db.update_partner(partner_id, partner_name=new_name)
    control_partner_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"partner:{partner_id}")]
    ])
    await data["message_to_delete"].delete()
    await message.answer("‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.</b>", parse_mode="HTML", reply_markup=control_partner_markup)
    await state.clear()

@router.message(PartnerForm.awaiting_partner_category)
async def edit_partner_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_id = data["partner_id"]
    new_category = int(message.text)
    await db.update_partner(partner_id, partner_category=new_category)
    control_partner_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"partner:{partner_id}")]
    ])
    await data["message_to_delete"].delete()
    await message.answer("‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞.</b>", parse_mode="HTML", reply_markup=control_partner_markup)
    await state.clear()

@router.message(PartnerForm.awaiting_partner_url)
async def edit_partner_url(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_id = data["partner_id"]
    new_url = message.text
    await db.update_partner(partner_id, partner_url=new_url)
    control_partner_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"partner:{partner_id}")]
    ])
    await data["message_to_delete"].delete()
    await message.answer("‚úÖ <b>URL –∏–∑–º–µ–Ω—ë–Ω.</b>", parse_mode="HTML", reply_markup=control_partner_markup)
    await state.clear()

@router.message(PartnerForm.awaiting_partner_name_new)
async def add_partner_handler(message: types.Message, state: FSMContext):
    partner_name = message.text
    await state.update_data(partner_name=partner_name)
    categories_text = "\n".join(
        [f"<code>{category['category_id']}</code>: <b>{category['category_name']}</b>" for category in
         await db.get_categories()])
    await message.answer(categories_text + "\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</b>", parse_mode="HTML")
    await state.set_state(PartnerForm.awaiting_partner_category_new)

@router.message(PartnerForm.awaiting_partner_category_new)
async def add_partner_category_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    partner_name = data["partner_name"]
    partner_category = message.text

    await db.add_partner(user_id=message.from_user.id, partner_name=partner_name, partner_category=partner_category)

    setting_markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º", callback_data="admin:partners")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:panel")],
    ])

    await message.answer("<b>‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode="HTML", reply_markup=setting_markup)
    await state.clear()
