import asyncio
import json
import os
from datetime import datetime
from urllib.parse import parse_qs

import requests
from dotenv import load_dotenv
from flask import Flask, jsonify, render_template, request

from telegram_bot import db
from telegram_bot.helper import str_to_timestamp, get_user_stroke
from telegram_webapp.services_text import SERVICES, SURVEY_FORM_TEXT

app = Flask(__name__, static_folder='static')
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


@app.route("/", methods=['GET'])
def index():
    logger.info("GET / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    return render_template('index.html')


@app.route("/form", methods=['GET'])
def form():
    logger.info("GET /form - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∫–µ—Ç—ã")
    return render_template('form.html')


@app.route("/survey", methods=['GET'])
def survey():
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    logger.info(f"GET /survey - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {request.args}")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è ID —É—Å–ª—É–≥–∏
    survey_id = None

    # –°–ø–æ—Å–æ–± 1: –∏–∑ tgWebAppStartParam (–æ—Å–Ω–æ–≤–Ω–æ–π)
    if 'tgWebAppStartParam' in request.args:
        survey_id = request.args.get('tgWebAppStartParam')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω tgWebAppStartParam: {survey_id}")

    # –°–ø–æ—Å–æ–± 2: –∏–∑ startapp (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
    if not survey_id and 'startapp' in request.args:
        survey_id = request.args.get('startapp')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω startapp: {survey_id}")

    # –°–ø–æ—Å–æ–± 3: –∏–∑ id (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if not survey_id and 'id' in request.args:
        survey_id = request.args.get('id')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω id: {survey_id}")

    if not survey_id:
        logger.error("ID —É—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ")
        return "ID —É—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω", 400

    try:
        survey_id = int(survey_id)
        service = SERVICES[survey_id]
        logger.info(f"–£—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–∞: {service['name']}")
    except (ValueError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å–ª—É–≥–∏: {e}")
        return "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    global_counter = 1
    formatted_option_groups = []

    for group in service['option_groups']:
        formatted_group = {
            'title': group.get('title'),
            'options': []
        }

        for option in group['options']:
            formatted_option = dict(option)
            formatted_option['formatted_number'] = number_to_emoji(global_counter)
            formatted_option['display_number'] = global_counter
            formatted_group['options'].append(formatted_option)
            global_counter += 1

        formatted_option_groups.append(formatted_group)

    return render_template('survey.html',
                           survey_id=survey_id,
                           service_name=service['name'],
                           service_description=service.get('description'),
                           service_options_title=service.get('options_title'),
                           service_option_groups=formatted_option_groups,
                           service_footer_link=service.get('footer_link'),
                           service_form_note=service.get('form_note'),
                           total_options=global_counter - 1)


@app.route("/get_user_data/<telegram_id>", methods=["GET"])
def get_user_data(telegram_id):
    logger.info(f"GET /get_user_data/{telegram_id}")
    try:
        user_profile = asyncio.run(db.get_user_profile(user_id=telegram_id))
        pets = asyncio.run(db.get_pets(user_id=telegram_id, is_multiple=True))

        if user_profile:
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: {user_profile['full_name']}")
            if len(pets) > 0:
                pets = list(map(lambda elem: dict(elem), pets))
                for pet in pets:
                    pet['birth_date'] = datetime.fromtimestamp(float(pet["birth_date"])).strftime('%Y-%m-%d')
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(pets)}")
            else:
                pets = []
                logger.info("–ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            data = {
                'full_name': user_profile['full_name'],
                'phone_number': user_profile['phone_number'],
                'birth_date': datetime.fromtimestamp(float(user_profile["birth_date"])).strftime('%Y-%m-%d'),
                'about_me': user_profile['about_me'],
                'pets': pets,
            }
            return jsonify(data)
        else:
            logger.info("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({"data": None})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_data: {e}")
        return jsonify({"data": None})


@app.route("/webapp_data", methods=["POST"])
def handle_webapp_data():
    logger.info("POST /webapp_data")
    try:
        content = request.json
        init_data = content.get("initData")
        form_data = content.get("formData")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {form_data}")

        if not init_data:
            logger.error("initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return jsonify({"ok": False, "error": "initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        validated_data = asyncio.run(db.validate_user_form_data(form_data))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validated_data is False:
            logger.error("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return jsonify({"ok": False, "error": "–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é"})

        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º validated_data
        user_id = validated_data['human']['user_id']
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        human = validated_data['human']
        asyncio.run(db.update_user_profile(
            user_id=user_id,
            birth_date=str_to_timestamp(human["birth_date"]),
            full_name=human["full_name"],
            phone_number=human["phone_number"],
            about_me=human["about_me"]
        ))
        asyncio.run(db.update_user(user_id=user_id, form_value=1))

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö
        asyncio.run(db.delete_pets(user_id))
        for pet in validated_data["pets"]:
            asyncio.run(db.add_pet(
                user_id=user_id,
                birth_date=str_to_timestamp(pet["birth_date"]),
                approx_weight=pet["weight"],
                name=pet["name"],
                gender=pet["gender"],
                pet_type=pet["type"],
                pet_breed=pet["breed"]
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        answer_url = f"https://api.telegram.org/bot{str(os.environ['BOT_TOKEN'])}/sendMessage"
        answer_payload = {
            "chat_id": user_id,
            "text": f"–°–ø–∞—Å–∏–±–æ, {human['full_name']}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
            "reply_markup": {"inline_keyboard": [[{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                   "callback_data": "menu"}]]}
        }

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        response = requests.post(answer_url, json=answer_payload)

        if response.status_code == 200:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return jsonify({"ok": True})
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return jsonify({"ok": False, "error": response.text})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webapp_data: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({"ok": False, "error": str(e)})


def number_to_emoji(number):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏-—Ü–∏—Ñ—Ä–∞–º–∏"""
    emoji_digits = {
        '0': '0Ô∏è‚É£',
        '1': '1Ô∏è‚É£',
        '2': '2Ô∏è‚É£',
        '3': '3Ô∏è‚É£',
        '4': '4Ô∏è‚É£',
        '5': '5Ô∏è‚É£',
        '6': '6Ô∏è‚É£',
        '7': '7Ô∏è‚É£',
        '8': '8Ô∏è‚É£',
        '9': '9Ô∏è‚É£'
    }

    return ''.join(emoji_digits[digit] for digit in str(number))


@app.route("/survey_data", methods=["POST"])
async def handle_survey_data():
    logger.info("POST /survey_data")
    try:
        content = request.json
        init_data = content.get("initData")
        survey_data = content.get("surveyData")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞: {survey_data}")

        if not init_data:
            logger.error("initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return jsonify({"ok": False, "error": "initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})

        if not isinstance(init_data, str):
            logger.error("initData –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return jsonify({"ok": False, "error": "initData –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"})

        try:
            parsed = parse_qs(init_data)
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ init_data: {list(parsed.keys())}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ init_data: {e}")
            pass

        service_id = survey_data['service_id']
        service_name = SERVICES[service_id]['name']
        user_id = survey_data['user_id']

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–æ—Å–∞: —É—Å–ª—É–≥–∞ {service_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_users(user_id=user_id)
        user_profile = await db.get_user_profile(user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_profile:
            logger.error(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({"ok": False, "error": "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"})

        contact_text = get_user_stroke(user_profile)

        message_text = SURVEY_FORM_TEXT.format(
            service_name=service_name,
            selected_option=survey_data['selected_option'],
            free_form=survey_data['free_form'],
            username=user['username'] if user else '–Ω–µ —É–∫–∞–∑–∞–Ω',
            contact_text=contact_text,
            promo_code=user['promocode'] if user else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        )

        logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, –¥–ª–∏–Ω–∞: {len(message_text)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        bot_token = os.environ.get('BOT_TOKEN')
        if not bot_token:
            logger.error("BOT_TOKEN not configured")
            return jsonify({"ok": False, "error": "BOT_TOKEN not configured"})

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            admin_ids = list(json.loads(os.environ['ADMIN_TELEGRAM_ID']))
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {admin_ids}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_TELEGRAM_ID: {e}")
            return jsonify({"ok": False, "error": "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        success_count = 0
        errors = []

        for admin_id in admin_ids:
            try:
                answer_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                answer_payload = {
                    "chat_id": admin_id,
                    "text": message_text,
                    "parse_mode": "HTML"
                }

                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                response = requests.post(answer_url, json=answer_payload)
                logger.info(f"–û—Ç–≤–µ—Ç Telegram API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {response.status_code}")

                if response.status_code == 200:
                    success_count += 1
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {response.status_code} - {response.text}"
                    errors.append(error_msg)
                    logger.error(error_msg)

            except Exception as e:
                error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {str(e)}"
                errors.append(error_msg)
                logger.error(error_msg)

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
        if success_count > 0:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            if errors:
                logger.warning(f"–ë—ã–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {errors}")
            return jsonify({"ok": True})
        else:
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: " + "; ".join(errors)
            logger.error(error_msg)
            return jsonify({"ok": False, "error": error_msg})

    except Exception as e:
        error_msg = f"Exception in handle_survey_data: {str(e)}"
        logger.error(error_msg)
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({"ok": False, "error": error_msg})


if __name__ == "__main__":
    app.run(debug=True, port=80)